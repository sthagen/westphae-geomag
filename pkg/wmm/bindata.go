// Code generated by go-bindata.
// sources:
// WMM.COF
// DO NOT EDIT!

package wmm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _wmmCof = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x4b\x92\xe5\x28\x0c\xdc\x77\x44\xdf\x81\x0b\xc8\x8d\x24\xbe\x87\xe8\xf5\xdc\x64\xce\x3f\xe1\x87\x7e\xb6\x29\x57\xd4\xd4\x8a\x67\x48\x94\x99\x12\x82\x4a\x29\x25\xca\x58\x8f\x9c\xc2\xdf\x3f\x7f\xff\xc2\xf9\xf5\x5f\x5a\xbf\xf3\xfc\x83\xe3\x0f\x65\x1c\xbf\x7f\xa5\x84\x29\xe5\x94\x80\x66\xe1\x71\xc8\x8a\x94\x7d\x87\xee\xc3\x7c\x64\x41\x60\x4a\x09\xb0\x4c\x3e\xea\x39\x51\xfa\x6c\x07\xeb\xb2\xa9\x08\xe0\x7c\xd0\x89\xa0\x4f\x8c\x04\x54\x4a\x59\x88\x18\x03\x10\x1f\x31\x68\xc5\x48\x9c\xb1\x1c\xfd\x83\x1d\x85\x8e\x22\xab\xa0\x29\x55\xa0\x79\x34\x41\x7c\x3e\x61\xeb\x42\x00\x1a\x8f\x63\xf8\xc6\xac\xe1\xfa\xc1\x27\x82\x17\xab\x84\x5c\xd1\xd6\x05\xe5\x1e\x4e\x59\xb1\x28\xa7\x13\xd1\x84\x3b\x7f\xf8\x7d\x7e\x54\x1b\xa6\x76\x54\x41\x2c\x56\x44\xbc\x10\x89\x4a\x33\x0f\x12\x59\x38\xc8\xc7\x10\xc4\x22\x5a\x07\x2d\xca\x50\xb9\x2b\x95\xe8\x15\xd0\x62\x55\x44\x47\x9a\xb9\x3f\xdd\xfd\x6c\x7c\xd3\x51\xc4\xdd\x34\xb0\xc8\x24\x0d\xb6\x0c\x42\x3e\xa6\x0f\x8b\x20\x96\xe1\x88\x7d\x21\x00\xc7\x10\x45\x9f\x7c\x98\xa4\xba\x74\x14\xd1\x01\xcc\x55\xd6\xe1\xc8\x6e\x50\xb5\x62\x4b\x6c\x08\x51\xd9\xe6\x5a\x07\xcc\x41\x47\xf1\x21\x2f\x77\xab\x28\x07\x62\x32\xca\x17\xe5\x7c\x53\x5e\x55\x39\xb7\x7c\xac\x51\x2a\xcd\xb0\x29\x9b\xa4\x24\xb5\x5b\x4d\xf9\x44\x61\x8f\xd3\xe5\x46\x77\x69\xd5\x55\x55\xe5\x58\x50\x32\x88\x38\x63\x0c\x74\xb0\xb2\x2a\x6b\x5d\xed\x6a\x0b\x36\xaf\x44\x8c\x5e\x69\x0c\x65\xd0\x95\x55\x0e\xe4\xd1\x8f\x4a\x5e\xe7\xa3\x69\x95\x9c\xee\x96\x9d\x57\xf7\x2a\x69\xea\x55\x6a\x1a\x03\xe8\x42\xbe\x3a\x82\x05\x21\x44\x3b\xa9\xf5\x4c\xb6\x31\x04\x30\xae\x0c\x36\xf3\x8a\xa6\x4e\x56\x1b\x9d\x3a\x9a\x23\x48\x10\x45\xb8\x0c\xd1\x01\xad\xc7\x8d\x43\x06\x8b\x20\x84\x28\xb2\x4d\x0e\x8f\x91\x63\xf7\xd1\x18\x6b\x1d\x74\x2b\xa1\x86\x9e\xc1\x90\x0f\x5c\xca\xbb\xb9\x3b\xd0\x6a\xfc\xb5\x12\xbb\xba\x0b\xbd\xca\xce\x50\x4b\x3c\x83\xe4\x88\x26\x08\x6d\x7a\xaa\x17\x70\xc6\x4a\x0c\x31\xaa\x20\xe4\x53\x25\xdb\xae\x45\xb9\xe1\x9c\x0f\x41\x48\x6d\xf8\x2d\x42\x25\x26\x3a\xa4\x9f\x04\xa1\xb3\x9e\x37\x8e\xac\x42\x06\x51\x10\xf2\x09\x58\x62\x00\x75\xef\xa2\xf9\x72\x54\x04\xa1\xb3\xea\xd5\xd9\xfd\xc2\xb2\xee\xc3\x0f\xab\x61\xf9\xa0\xb2\xb9\xd5\x42\x25\x6a\x3e\x86\x55\x7b\x1a\xba\x33\x5e\x96\x91\x83\x8b\x20\x48\x84\x69\x07\x01\x1c\x6f\x19\x1c\x96\x0f\x60\xdd\x19\xf9\x92\xb6\x40\x50\x10\x5a\xed\x2a\x12\xb0\x5c\x96\x3d\x63\xd4\xfb\xce\xd8\x22\x95\xd0\x19\xd4\x2b\xc9\x07\xfa\xe1\xb9\x54\x49\x40\x54\x41\x74\x53\xae\x8a\x66\x34\x28\xb0\x52\x84\x74\x01\x20\x9b\xbc\x5c\xb0\x61\xf8\x51\x3e\x2d\x83\xa9\xee\x6f\xb5\x7b\x06\x67\xcc\xe0\x90\x60\xb8\xed\x3e\xd2\xaf\xa6\x9d\xa8\xa4\x95\x78\xe6\x3c\x54\x62\x7e\xb2\xf2\x0c\x92\xb9\x36\xb6\x5e\x15\x41\x78\xb7\xd5\xba\x6f\x91\x55\x50\xae\xac\xaa\xb8\x6b\x31\xe0\x72\x47\x6d\x58\xb5\x87\xc8\x1e\x11\xa1\x28\xd5\xab\x6e\x5e\xe9\xe8\xfa\x0c\x0b\xb6\x09\x42\x33\x68\xe7\x1c\x38\x36\x90\x00\xae\x82\xd0\x53\xe1\x22\xc7\x17\xfd\xea\xac\x44\xcc\x96\x73\xf0\x87\x51\xde\xb1\x92\x9c\x9f\x08\x34\x87\xbc\xfb\xf0\x96\x95\x22\xbc\x1f\xd0\x23\x09\xd7\xba\x42\x41\xb0\x7d\xd1\xf3\x51\x2e\x0f\x05\x07\xab\x8e\x62\x5f\xaa\x21\xde\x63\x54\xcb\x82\xfa\xdc\xa3\xbb\x74\xcd\xc7\x89\xf0\x9c\x77\x1b\xb5\xad\x72\x45\x68\xa6\xed\x36\x80\xb2\x3b\xb5\xe0\x5e\x0d\x43\xa8\x22\xfa\x86\x95\xf6\x67\xd7\x81\x71\xe3\xd8\x50\x17\x02\xed\xdf\x05\x3b\x1f\x23\x9e\x8f\x7c\x63\x85\xde\x19\x78\x53\x25\x9b\x9c\xa3\x57\x89\x3d\x8c\xe0\xb5\xae\xd0\xef\x5a\x7b\xc9\x24\xba\x18\x74\x73\x17\xbd\x4a\x6c\x1d\x5c\x9e\x93\x9b\x18\xce\x65\xeb\xd5\x26\x86\x77\xc2\x66\xa3\xfe\x74\x37\x78\xb5\xab\x12\x7a\xb2\x0a\x08\x7f\xbf\xa0\x79\xf0\xce\x4a\xb3\x65\x6f\x9f\xf3\x7d\xf7\x44\x84\x18\xf3\xce\x05\x28\xd6\x6e\x2c\x98\x85\x40\xcf\xb4\x57\xe2\x26\xe7\x1e\x03\x1f\xaf\x91\x90\xcb\x4d\x0c\xfa\x71\xf7\x21\xaf\x2b\xf7\xea\xab\x2e\xaa\x08\xef\x3e\x9e\xcb\x97\x7e\x45\x5e\x57\xfe\xec\xbc\xdc\x38\xf9\xa9\xc3\xeb\xca\x5f\x4b\xfb\xdb\x59\x11\xce\x65\xbe\xb1\x0a\x3a\xbc\xfe\xd0\x46\xfd\xd5\x2b\xaf\xab\xe7\x6d\xb5\x8f\x31\xec\x4b\x79\xb0\xda\xc7\xf0\xba\x72\x45\xf4\xe6\x6e\xa8\x2b\xba\xbb\xb6\x67\x85\xf8\x70\xf7\xbb\x18\xf4\x98\xcc\x5f\xbc\x4b\xf0\xf7\xaf\xf9\xc3\xbf\xff\x83\xf8\x2f\x00\x00\xff\xff\xf3\x05\x95\xba\x2a\x12\x00\x00")

func wmmCofBytes() ([]byte, error) {
	return bindataRead(
		_wmmCof,
		"WMM.COF",
	)
}

func wmmCof() (*asset, error) {
	bytes, err := wmmCofBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "WMM.COF", size: 4650, mode: os.FileMode(420), modTime: time.Unix(1563744062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"WMM.COF": wmmCof,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"WMM.COF": &bintree{wmmCof, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

